"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllureJestApi = void 0;
const allure_js_commons_1 = require("allure-js-commons");
class AllureJestApi {
    constructor(env, context) {
        this.env = env;
        this.context = context;
    }
    async sendMetadata(metadata) {
        var _a;
        const { currentTestName, currentConcurrentTestName } = this.context.expect.getState();
        const testName = currentTestName || ((_a = currentConcurrentTestName === null || currentConcurrentTestName === void 0 ? void 0 : currentConcurrentTestName.getStore) === null || _a === void 0 ? void 0 : _a.call(currentConcurrentTestName));
        return new Promise((resolve) => {
            this.env.handleAllureMetadata({
                currentTestName: testName,
                metadata,
            });
            return resolve(void 0);
        });
    }
    label(name, value) {
        this.sendMetadata({
            labels: [
                {
                    name,
                    value,
                },
            ],
        });
    }
    parameter(name, value, options) {
        this.sendMetadata({
            parameter: [
                Object.assign({ name,
                    value }, options),
            ],
        });
    }
    attachment(content, type) {
        const isBuffer = Buffer.isBuffer(content);
        this.sendMetadata({
            attachments: [
                {
                    name: "Attachment",
                    content: isBuffer ? content.toString("base64") : content,
                    encoding: isBuffer ? "base64" : "utf8",
                    type,
                },
            ],
        });
    }
    link(url, name, type) {
        this.sendMetadata({
            links: [
                {
                    name,
                    type,
                    url,
                },
            ],
        });
    }
    async step(name, body) {
        const step = new allure_js_commons_1.AllureCommandStepExecutable(name);
        await step.run(body, async (message) => {
            await this.sendMetadata(message);
        });
    }
    async displayName(name) {
        await this.sendMetadata({
            displayName: name,
        });
    }
    epic(epic) {
        this.label(allure_js_commons_1.LabelName.EPIC, epic);
    }
    feature(feature) {
        this.label(allure_js_commons_1.LabelName.FEATURE, feature);
    }
    story(story) {
        this.label(allure_js_commons_1.LabelName.STORY, story);
    }
    suite(name) {
        this.label(allure_js_commons_1.LabelName.SUITE, name);
    }
    parentSuite(name) {
        this.label(allure_js_commons_1.LabelName.PARENT_SUITE, name);
    }
    subSuite(name) {
        this.label(allure_js_commons_1.LabelName.SUB_SUITE, name);
    }
    owner(owner) {
        this.label(allure_js_commons_1.LabelName.OWNER, owner);
    }
    severity(severity) {
        this.label(allure_js_commons_1.LabelName.SEVERITY, severity);
    }
    layer(layer) {
        this.label(allure_js_commons_1.LabelName.LAYER, layer);
    }
    id(allureId) {
        this.label(allure_js_commons_1.LabelName.ALLURE_ID, allureId);
    }
    tag(tag) {
        this.label(allure_js_commons_1.LabelName.TAG, tag);
    }
    issue(name, url) {
        this.link(url, name, allure_js_commons_1.LinkType.ISSUE);
    }
    tms(name, url) {
        this.link(url, name, allure_js_commons_1.LinkType.TMS);
    }
    description(markdown) {
        this.sendMetadata({
            description: markdown,
        });
    }
    descriptionHtml(html) {
        this.sendMetadata({
            descriptionHtml: html,
        });
    }
    testCaseId(testCaseId) {
        this.sendMetadata({
            testCaseId,
        });
    }
    historyId(historyId) {
        this.sendMetadata({
            historyId,
        });
    }
}
exports.AllureJestApi = AllureJestApi;
//# sourceMappingURL=AllureJestApi.js.map